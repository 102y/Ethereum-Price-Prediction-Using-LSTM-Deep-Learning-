# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12ZaDGibNGaNH8r0PMhBVzzRuHOqwyClz
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.layers import Dense, LSTM, Dropout
import matplotlib.pyplot as plt

# تحميل البيانات
data = pd.read_csv('/content/ETH_1H.csv')
data['Date'] = pd.to_datetime(data['Date'])
data.set_index('Date', inplace=True)

data

# استخدام العمود "Close" كقيمة للتنبؤ
data = data[['Close']]

# تحويل البيانات إلى مصفوفة
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(data)

# إعداد بيانات التدريب والاختبار
train_size = int(len(scaled_data) * 0.8)
train_data = scaled_data[:train_size]
test_data = scaled_data[train_size:]

# إعداد بيانات السلاسل الزمنية
def create_dataset(dataset, time_step=1):
    X, y = [], []
    for i in range(len(dataset) - time_step - 1):
        a = dataset[i:(i + time_step), 0]
        X.append(a)
        y.append(dataset[i + time_step, 0])
    return np.array(X), np.array(y)

# إعداد السلاسل الزمنية
time_step = 24  # عدد الساعات السابقة التي نأخذها في الاعتبار
X_train, y_train = create_dataset(train_data, time_step)
X_test, y_test = create_dataset(test_data, time_step)

# إعادة تشكيل البيانات لتتناسب مع مدخلات LSTM
X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)

# بناء نموذج LSTM
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(time_step, 1)))
model.add(Dropout(0.2))
model.add(LSTM(50, return_sequences=False))
model.add(Dropout(0.2))
model.add(Dense(1))

# تجميع النموذج
model.compile(optimizer='adam', loss='mean_squared_error')

# تدريب النموذج
model.fit(X_train, y_train, epochs=100, batch_size=32)

# التنبؤ
predicted_prices = model.predict(X_test)
predicted_prices = scaler.inverse_transform(predicted_prices)

# رسم النتائج
plt.plot(data.index[-len(y_test):], data['Close'].values[-len(y_test):], color='blue', label='Actual Price')
plt.plot(data.index[-len(predicted_prices):], predicted_prices, color='red', label='Predicted Price')
plt.title('Ethereum Price Prediction')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.show()

# التنبؤ بالسعر للساعة التالية
last_24_hours = scaled_data[-time_step:]
last_24_hours = last_24_hours.reshape(1, time_step, 1)
next_hour_prediction = model.predict(last_24_hours)
next_hour_prediction = scaler.inverse_transform(next_hour_prediction)
print(f"Predicted price for the next hour: {next_hour_prediction[0][0]}")